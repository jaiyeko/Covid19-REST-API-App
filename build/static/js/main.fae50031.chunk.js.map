{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeurl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","LineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchCountries","FormControl","formControl","NativeSelect","default","onChange","e","target","i","key","App","state","fetchedData","setState","this","src","image","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fae50031.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__gnnGy\",\"card\":\"Cards_card__22NeG\",\"infected\":\"Cards_infected__V8A9k\",\"recovered\":\"Cards_recovered__2qztp\",\"deaths\":\"Cards_deaths__7Vya7\"};","import React from 'react'\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames'\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ( { data: {confirmed, recovered, deaths, lastUpdate }} ) => {\r\n    if(!confirmed){\r\n        return 'Loading...'\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify='center'>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)} >\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Infected</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp\r\n                            start={0}\r\n                            end={confirmed.value}\r\n                            duration={2.5}\r\n                            separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{  new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Recovered</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp\r\n                            start={0}\r\n                            end={recovered.value}\r\n                            duration={2.5}\r\n                            separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{  new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of recovered patients of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)} >\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Deaths</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp\r\n                            start={0}\r\n                            end={deaths.value}\r\n                            duration={2.5}\r\n                            separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{  new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of deaths of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios'\r\n\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeurl = url;\r\n    if (country){\r\n         changeurl = `${url}/countries/${country}`\r\n    }\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeurl);\r\n\r\n        return {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }))\r\n        return modifiedData\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport const countries = async () => {\r\n    try {\r\n        const {data: {countries}} = await axios.get(`${url}/countries`);\r\n        return countries.map(country => country.name)\r\n    } catch (error) {\r\n        \r\n    }\r\n}","import React, {useState, useEffect } from 'react'\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ( { data: {confirmed, recovered, deaths}, country } ) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        \r\n        fetchAPI()\r\n\r\n    }, [dailyData])\r\n    const LineChart = (\r\n        dailyData.length ? (\r\n        <Line \r\n        data = {{\r\n            labels: dailyData.map(({date}) => date),\r\n            datasets: [\r\n                {\r\n                data: dailyData.map(({confirmed}) => confirmed),\r\n                label: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: true,\r\n                },\r\n                {\r\n                    data: dailyData.map(({deaths}) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    fill: true,\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)'\r\n                }\r\n        ]\r\n        }}\r\n\r\n        \r\n        />): null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed ? (\r\n            <Bar \r\n            data={{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [{\r\n                    label: 'People',\r\n                    backgroundColor: [\r\n                        'rgba(0,0,255,0.5)',\r\n                        'rgba(0,255,0,0.5)',\r\n                        'rgba(255,0,0,0.5)'\r\n                    ],\r\n                    data:[confirmed.value, recovered.value, deaths.value]\r\n                }]\r\n            }}\r\n            options={{\r\n                legend: { display: true  },\r\n                title: { display: true, text: `Current state in ${country}` }\r\n            }}\r\n            />\r\n        ) : null\r\n    );\r\n\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {  country? barChart : LineChart }\r\n        </div>\r\n           \r\n    )\r\n}\r\n\r\nexport default Chart;","import React, {useState, useEffect} from 'react'\r\nimport { NativeSelect, FormControl } from '@material-ui/core'\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { countries } from '../../api';\r\n\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([])\r\n    useEffect(() => {\r\n        const fetchCountries = async () => {\r\n            setFetchedCountries(await countries())\r\n        }\r\n        fetchCountries()\r\n    }, [setFetchedCountries])\r\n    console.log(fetchedCountries)\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect default=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=''>Global</option>\r\n                {fetchedCountries.map((country,i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React, {Component} from 'react'\r\n\r\nimport { Cards, Chart, CountryPicker } from './components'\r\nimport styles from './App.module.css'\r\nimport { fetchData } from './api'\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        data: {},\r\n        country: ''\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const data = await fetchData();\r\n        this.setState({data})\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country)\r\n        this.setState({data: fetchedData, country})\r\n    } \r\n    render(){\r\n        const {data, country } = this.state\r\n        return(\r\n            <div className={styles.container}>\r\n                <img src= 'https://www.begbies-traynorgroup.com/assets/uploads/Articles%20images/covid19-coronavirus.jpg' \r\n                className={styles.image} alt='COVID-19'/>\r\n                <Cards data={data} />\r\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n                <Chart data={data} country={country} />\r\n            </div>\r\n        )\r\n    }   \r\n}\r\n\r\n\r\nexport default App;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__32Ggi\",\"image\":\"App_image__3flH0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1wfJb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl___KvYb\"};"],"sourceRoot":""}